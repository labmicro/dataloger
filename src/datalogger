#!/usr/bin/env python3
# encoding: utf-8

##################################################################################################
# Copyright (c) 2022-2023, Laboratorio de Microprocesadores
# Facultad de Ciencias Exactas y Tecnología, Universidad Nacional de Tucumán
# https://www.microprocesadores.unt.edu.ar/
#
# Copyright (c) 2022-2023, Esteban Volentini <evolentini@herrera.unt.edu.ar>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
# associated documentation files (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute,
# sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial
# portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
# NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
# OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: 2023, Esteban Volentini <evolentini@herrera.unt.edu.ar>
##################################################################################################

import os
import sys
import time
import logging

from argparse import ArgumentParser
from logging.handlers import RotatingFileHandler

from __about__ import __version__
from dataloggers import Datalogger


class ErrorFormatter(logging.Formatter):
    def format(self, record):
        record.exc_text = ""
        return super(ErrorFormatter, self).format(record)

    def formatException(self, record):
        return ""


def configurar_registro(argumentos):
    registro = logging.getLogger()
    registro.setLevel(logging.DEBUG)

    formatter = logging.Formatter(
        "%(asctime)-20s %(levelname)-10s %(name)-15s %(message)-s", "%Y-%m-%d %H:%M:%S"
    )

    handler = logging.StreamHandler(sys.stdout)
    handler.setFormatter(formatter)
    if argumentos.depuracion:
        handler.setLevel(logging.DEBUG)
    else:
        handler.setLevel(logging.WARNING)
    registro.addHandler(handler)

    handler = RotatingFileHandler("debug.log", maxBytes=4 * 1024 * 1024, backupCount=1)
    handler.setFormatter(formatter)
    handler.setLevel(logging.DEBUG)
    registro.addHandler(handler)

    formatter = ErrorFormatter(
        "%(asctime)-20s %(levelname)-10s %(name)-15s %(message)-s", "%Y-%m-%d %H:%M:%S"
    )
    handler = RotatingFileHandler("error.log", maxBytes=1024 * 1024, backupCount=8)
    handler.setFormatter(formatter)
    handler.setLevel(logging.WARNING)
    registro.addHandler(handler)


if __name__ == "__main__":
    parser = ArgumentParser(description="Firmware del equipo colector de datos")

    parser.add_argument(
        "-c",
        "--config",
        dest="config",
        action="store",
        default="./config.yaml",
        help="Archivo de configuración",
    )
    parser.add_argument(
        "-d",
        "--depuracion",
        dest="depuracion",
        action="store_true",
        help="Muestra la informacion de depuracion por pantalla durante la ejecucion",
    )
    parser.add_argument(
        "-v",
        "--version",
        action="version",
        version=f"{os.path.basename(__file__)} {__version__}",
    )

    argumentos = parser.parse_args()
    configurar_registro(argumentos)

    registro = logging.getLogger(__name__)
    registro.debug("Comenzando la ejecución del datalogger")
    datalogger = Datalogger(config=argumentos.config)
    datalogger.start()

    while True:
        datalogger.poll()
        time.sleep(1)
